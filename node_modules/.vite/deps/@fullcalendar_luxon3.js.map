{
  "version": 3,
  "sources": ["../../@fullcalendar/luxon3/index.js"],
  "sourcesContent": ["import { createPlugin } from '@fullcalendar/core/index.js';\nimport { DateTime, Duration } from 'luxon';\nimport { CalendarImpl, NamedTimeZoneImpl } from '@fullcalendar/core/internal.js';\n\nfunction toLuxonDateTime(date, calendar) {\n    if (!(calendar instanceof CalendarImpl)) {\n        throw new Error('must supply a CalendarApi instance');\n    }\n    let { dateEnv } = calendar.getCurrentData();\n    return DateTime.fromJSDate(date, {\n        zone: dateEnv.timeZone,\n        locale: dateEnv.locale.codes[0],\n    });\n}\nfunction toLuxonDuration(duration, calendar) {\n    if (!(calendar instanceof CalendarImpl)) {\n        throw new Error('must supply a CalendarApi instance');\n    }\n    let { dateEnv } = calendar.getCurrentData();\n    return Duration.fromObject(duration, {\n        locale: dateEnv.locale.codes[0],\n    });\n}\n// Internal Utils\nfunction luxonToArray(datetime) {\n    return [\n        datetime.year,\n        datetime.month - 1,\n        datetime.day,\n        datetime.hour,\n        datetime.minute,\n        datetime.second,\n        datetime.millisecond,\n    ];\n}\nfunction arrayToLuxon(arr, timeZone, locale) {\n    return DateTime.fromObject({\n        year: arr[0],\n        month: arr[1] + 1,\n        day: arr[2],\n        hour: arr[3],\n        minute: arr[4],\n        second: arr[5],\n        millisecond: arr[6],\n    }, {\n        locale,\n        zone: timeZone,\n    });\n}\n\nclass LuxonNamedTimeZone extends NamedTimeZoneImpl {\n    offsetForArray(a) {\n        return arrayToLuxon(a, this.timeZoneName).offset;\n    }\n    timestampToArray(ms) {\n        return luxonToArray(DateTime.fromMillis(ms, {\n            zone: this.timeZoneName,\n        }));\n    }\n}\n\nfunction formatWithCmdStr(cmdStr, arg) {\n    let cmd = parseCmdStr(cmdStr);\n    if (arg.end) {\n        let start = arrayToLuxon(arg.start.array, arg.timeZone, arg.localeCodes[0]);\n        let end = arrayToLuxon(arg.end.array, arg.timeZone, arg.localeCodes[0]);\n        return formatRange(cmd, start.toFormat.bind(start), end.toFormat.bind(end), arg.defaultSeparator);\n    }\n    return arrayToLuxon(arg.date.array, arg.timeZone, arg.localeCodes[0]).toFormat(cmd.whole);\n}\nfunction parseCmdStr(cmdStr) {\n    let parts = cmdStr.match(/^(.*?)\\{(.*)\\}(.*)$/); // TODO: lookbehinds for escape characters\n    if (parts) {\n        let middle = parseCmdStr(parts[2]);\n        return {\n            head: parts[1],\n            middle,\n            tail: parts[3],\n            whole: parts[1] + middle.whole + parts[3],\n        };\n    }\n    return {\n        head: null,\n        middle: null,\n        tail: null,\n        whole: cmdStr,\n    };\n}\nfunction formatRange(cmd, formatStart, formatEnd, separator) {\n    if (cmd.middle) {\n        let startHead = formatStart(cmd.head);\n        let startMiddle = formatRange(cmd.middle, formatStart, formatEnd, separator);\n        let startTail = formatStart(cmd.tail);\n        let endHead = formatEnd(cmd.head);\n        let endMiddle = formatRange(cmd.middle, formatStart, formatEnd, separator);\n        let endTail = formatEnd(cmd.tail);\n        if (startHead === endHead && startTail === endTail) {\n            return startHead +\n                (startMiddle === endMiddle ? startMiddle : startMiddle + separator + endMiddle) +\n                startTail;\n        }\n    }\n    let startWhole = formatStart(cmd.whole);\n    let endWhole = formatEnd(cmd.whole);\n    if (startWhole === endWhole) {\n        return startWhole;\n    }\n    return startWhole + separator + endWhole;\n}\n\nvar index = createPlugin({\n    name: '@fullcalendar/luxon3',\n    cmdFormatter: formatWithCmdStr,\n    namedTimeZonedImpl: LuxonNamedTimeZone,\n});\n\nexport { index as default, toLuxonDateTime, toLuxonDuration };\n"],
  "mappings": "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",
  "names": []
}
